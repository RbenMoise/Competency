{"ast":null,"code":"var _jsxFileName = \"/Volumes/Rben/Repos/Spider_chart/frontend/src/components/Modern/SpiderChart.js\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useRef } from \"react\";\nimport Chart from \"chart.js/auto\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst SpiderChart = ({\n  currentScores,\n  projectedScores,\n  supervisorScores,\n  categories\n}) => {\n  _s();\n  const chartRef = useRef(null);\n  const chartInstance = useRef(null);\n  useEffect(() => {\n    const ctx = chartRef.current.getContext(\"2d\");\n    const data = {\n      labels: categories,\n      datasets: [{\n        label: \"Current Scores\",\n        data: categories.map(cat => currentScores[cat] || 0),\n        fill: true,\n        backgroundColor: \"rgba(156, 202, 13, 0.2)\",\n        borderColor: \"#9cca0d\",\n        pointBackgroundColor: \"#9cca0d\",\n        pointBorderColor: \"#fff\",\n        pointHoverBackgroundColor: \"#fff\",\n        pointHoverBorderColor: \"#9cca0d\"\n      }, ...(projectedScores ? [{\n        label: \"Projected Scores\",\n        data: categories.map(cat => projectedScores[cat] || 0),\n        fill: true,\n        backgroundColor: \"rgba(226, 72, 58, 0.2)\",\n        borderColor: \"#e2483a\",\n        pointBackgroundColor: \"#e2483a\",\n        pointBorderColor: \"#fff\",\n        pointHoverBackgroundColor: \"#fff\",\n        pointHoverBorderColor: \"#e2483a\"\n      }] : []), ...(supervisorScores ? [{\n        label: \"Supervisor Scores\",\n        data: categories.map(cat => supervisorScores[cat] || 0),\n        fill: true,\n        backgroundColor: \"rgba(54, 162, 235, 0.2)\",\n        borderColor: \"#36a2eb\",\n        pointBackgroundColor: \"#36a2eb\",\n        pointBorderColor: \"#fff\",\n        pointHoverBackgroundColor: \"#fff\",\n        pointHoverBorderColor: \"#36a2eb\"\n      }] : [])]\n    };\n    const options = {\n      responsive: {\n        min: 300\n      },\n      scales: {\n        r: {\n          angleLines: {\n            display: true\n          },\n          suggestedMin: 0,\n          suggestedMax: 5,\n          ticks: {\n            stepSize: 1\n          }\n        }\n      },\n      plugins: {\n        legend: {\n          position: \"top\"\n        },\n        tooltip: {\n          enabled: true\n        }\n      }\n    };\n    if (chartInstance.current) {\n      chartInstance.current.destroy();\n    }\n    chartInstance.current = new Chart(ctx, {\n      type: \"radar\",\n      data,\n      options\n    });\n    return () => {\n      if (chartInstance.current) {\n        chartInstance.current.destroy();\n      }\n    };\n  }, [currentScores, projectedScores, supervisorScores, categories]);\n  return /*#__PURE__*/_jsxDEV(\"canvas\", {\n    ref: chartRef\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 97,\n    columnNumber: 10\n  }, this);\n};\n_s(SpiderChart, \"u5+iHnwD4hjVcMuzTE/TbI78erc=\");\n_c = SpiderChart;\nexport default SpiderChart;\nvar _c;\n$RefreshReg$(_c, \"SpiderChart\");","map":{"version":3,"names":["React","useEffect","useRef","Chart","jsxDEV","_jsxDEV","SpiderChart","currentScores","projectedScores","supervisorScores","categories","_s","chartRef","chartInstance","ctx","current","getContext","data","labels","datasets","label","map","cat","fill","backgroundColor","borderColor","pointBackgroundColor","pointBorderColor","pointHoverBackgroundColor","pointHoverBorderColor","options","responsive","min","scales","r","angleLines","display","suggestedMin","suggestedMax","ticks","stepSize","plugins","legend","position","tooltip","enabled","destroy","type","ref","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/Volumes/Rben/Repos/Spider_chart/frontend/src/components/Modern/SpiderChart.js"],"sourcesContent":["import React, { useEffect, useRef } from \"react\";\nimport Chart from \"chart.js/auto\";\n\nconst SpiderChart = ({\n  currentScores,\n  projectedScores,\n  supervisorScores,\n  categories,\n}) => {\n  const chartRef = useRef(null);\n  const chartInstance = useRef(null);\n\n  useEffect(() => {\n    const ctx = chartRef.current.getContext(\"2d\");\n    const data = {\n      labels: categories,\n      datasets: [\n        {\n          label: \"Current Scores\",\n          data: categories.map((cat) => currentScores[cat] || 0),\n          fill: true,\n          backgroundColor: \"rgba(156, 202, 13, 0.2)\",\n          borderColor: \"#9cca0d\",\n          pointBackgroundColor: \"#9cca0d\",\n          pointBorderColor: \"#fff\",\n          pointHoverBackgroundColor: \"#fff\",\n          pointHoverBorderColor: \"#9cca0d\",\n        },\n        ...(projectedScores\n          ? [\n              {\n                label: \"Projected Scores\",\n                data: categories.map((cat) => projectedScores[cat] || 0),\n                fill: true,\n                backgroundColor: \"rgba(226, 72, 58, 0.2)\",\n                borderColor: \"#e2483a\",\n                pointBackgroundColor: \"#e2483a\",\n                pointBorderColor: \"#fff\",\n                pointHoverBackgroundColor: \"#fff\",\n                pointHoverBorderColor: \"#e2483a\",\n              },\n            ]\n          : []),\n        ...(supervisorScores\n          ? [\n              {\n                label: \"Supervisor Scores\",\n                data: categories.map((cat) => supervisorScores[cat] || 0),\n                fill: true,\n                backgroundColor: \"rgba(54, 162, 235, 0.2)\",\n                borderColor: \"#36a2eb\",\n                pointBackgroundColor: \"#36a2eb\",\n                pointBorderColor: \"#fff\",\n                pointHoverBackgroundColor: \"#fff\",\n                pointHoverBorderColor: \"#36a2eb\",\n              },\n            ]\n          : []),\n      ],\n    };\n\n    const options = {\n      responsive: {\n        min: 300,\n      },\n      scales: {\n        r: {\n          angleLines: { display: true },\n          suggestedMin: 0,\n          suggestedMax: 5,\n          ticks: { stepSize: 1 },\n        },\n      },\n      plugins: {\n        legend: { position: \"top\" },\n        tooltip: { enabled: true },\n      },\n    };\n\n    if (chartInstance.current) {\n      chartInstance.current.destroy();\n    }\n\n    chartInstance.current = new Chart(ctx, {\n      type: \"radar\",\n      data,\n      options,\n    });\n\n    return () => {\n      if (chartInstance.current) {\n        chartInstance.current.destroy();\n      }\n    };\n  }, [currentScores, projectedScores, supervisorScores, categories]);\n\n  return <canvas ref={chartRef} />;\n};\n\nexport default SpiderChart;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}