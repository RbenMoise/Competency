{"ast":null,"code":"var _jsxFileName = \"/Volumes/Rben/Repos/Spider_chart/frontend/src/components/Modern/SpiderChart.js\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useRef } from \"react\";\nimport Chart from \"chart.js/auto\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst SpiderChart = ({\n  currentScores,\n  projectedScores,\n  supervisorScores,\n  categories\n}) => {\n  _s();\n  const chartRef = useRef(null);\n  const chartInstance = useRef(null);\n  useEffect(() => {\n    const ctx = chartRef.current.getContext(\"2d\");\n    const data = {\n      labels: categories,\n      datasets: [{\n        label: \"Current Scores\",\n        data: categories.map(cat => currentScores[cat] || 0),\n        fill: true,\n        backgroundColor: \"rgba(156, 202, 13, 0.2)\",\n        // Keeping a distinct color for supervisorScores\n        borderColor: \"#9cca0d\",\n        pointBackgroundColor: \"#9cca0d\",\n        // From old chart\n        pointBorderColor: \"#fff\",\n        pointHoverBackgroundColor: \"#fff\",\n        pointHoverBorderColor: \"rgba(54, 162, 235, 1)\"\n      }, ...(projectedScores ? [{\n        label: \"Projected Scores\",\n        data: categories.map(cat => projectedScores[cat] || 0),\n        fill: true,\n        backgroundColor: \"rgba(255, 99, 132, 0.2)\",\n        // From old chart\n        borderColor: \"rgba(255, 99, 132, 1)\",\n        // From old chart\n        pointBackgroundColor: \"rgba(255, 99, 132, 1)\",\n        // From old chart\n        pointBorderColor: \"#fff\",\n        pointHoverBackgroundColor: \"#fff\",\n        pointHoverBorderColor: \"rgba(255, 99, 132, 1)\"\n      }] : []), ...(supervisorScores ? [{\n        label: \"Supervisor Scores\",\n        data: categories.map(cat => supervisorScores[cat] || 0),\n        fill: true,\n        backgroundColor: \"rgba(54, 162, 235, 0.4)\",\n        // From old chart\n        borderColor: \"rgba(54, 162, 235, 1)\",\n        // From old chart\n        pointBackgroundColor: \"rgba(54, 162, 235, 1)\",\n        // From old chart\n\n        pointBorderColor: \"#fff\",\n        pointHoverBackgroundColor: \"#fff\",\n        pointHoverBorderColor: \"#9cca0d\"\n      }] : [])]\n    };\n    const options = {\n      responsive: true,\n      maintainAspectRatio: false,\n      // From old chart\n      scales: {\n        r: {\n          min: 0,\n          // From old chart\n          max: 5,\n          // From old chart\n          ticks: {\n            stepSize: 1,\n            // From old chart\n            backdropColor: \"rgba(0, 0, 0, 0)\" // From old chart\n          },\n          pointLabels: {\n            font: {\n              size: 14,\n              // From old chart\n              weight: \"bold\",\n              // From old chart\n              family: \"'Gill Sans', Tahoma, Geneva, Verdana, sans-serif\" // From old chart\n            },\n            color: \"#333\" // From old chart\n          },\n          angleLines: {\n            display: true\n          }\n        }\n      },\n      plugins: {\n        legend: {\n          position: \"top\",\n          // From old chart\n          labels: {\n            font: {\n              size: 15 // From old chart\n            }\n          }\n        },\n        tooltip: {\n          enabled: true\n        }\n      }\n    };\n    if (chartInstance.current) {\n      chartInstance.current.destroy();\n    }\n    chartInstance.current = new Chart(ctx, {\n      type: \"radar\",\n      data,\n      options\n    });\n    return () => {\n      if (chartInstance.current) {\n        chartInstance.current.destroy();\n      }\n    };\n  }, [currentScores, projectedScores, supervisorScores, categories]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"chart\",\n    style: {\n      height: \"500px\"\n    },\n    children: /*#__PURE__*/_jsxDEV(\"canvas\", {\n      ref: chartRef\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 118,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 117,\n    columnNumber: 5\n  }, this);\n};\n_s(SpiderChart, \"u5+iHnwD4hjVcMuzTE/TbI78erc=\");\n_c = SpiderChart;\nexport default SpiderChart;\nvar _c;\n$RefreshReg$(_c, \"SpiderChart\");","map":{"version":3,"names":["React","useEffect","useRef","Chart","jsxDEV","_jsxDEV","SpiderChart","currentScores","projectedScores","supervisorScores","categories","_s","chartRef","chartInstance","ctx","current","getContext","data","labels","datasets","label","map","cat","fill","backgroundColor","borderColor","pointBackgroundColor","pointBorderColor","pointHoverBackgroundColor","pointHoverBorderColor","options","responsive","maintainAspectRatio","scales","r","min","max","ticks","stepSize","backdropColor","pointLabels","font","size","weight","family","color","angleLines","display","plugins","legend","position","tooltip","enabled","destroy","type","className","style","height","children","ref","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/Volumes/Rben/Repos/Spider_chart/frontend/src/components/Modern/SpiderChart.js"],"sourcesContent":["import React, { useEffect, useRef } from \"react\";\nimport Chart from \"chart.js/auto\";\n\nconst SpiderChart = ({\n  currentScores,\n  projectedScores,\n  supervisorScores,\n  categories,\n}) => {\n  const chartRef = useRef(null);\n  const chartInstance = useRef(null);\n\n  useEffect(() => {\n    const ctx = chartRef.current.getContext(\"2d\");\n    const data = {\n      labels: categories,\n      datasets: [\n        {\n          label: \"Current Scores\",\n          data: categories.map((cat) => currentScores[cat] || 0),\n          fill: true,\n         backgroundColor: \"rgba(156, 202, 13, 0.2)\", // Keeping a distinct color for supervisorScores\n                borderColor: \"#9cca0d\",\n                pointBackgroundColor: \"#9cca0d\", // From old chart\n          pointBorderColor: \"#fff\",\n          pointHoverBackgroundColor: \"#fff\",\n          pointHoverBorderColor: \"rgba(54, 162, 235, 1)\",\n        },\n        ...(projectedScores\n          ? [\n              {\n                label: \"Projected Scores\",\n                data: categories.map((cat) => projectedScores[cat] || 0),\n                fill: true,\n                backgroundColor: \"rgba(255, 99, 132, 0.2)\", // From old chart\n                borderColor: \"rgba(255, 99, 132, 1)\", // From old chart\n                pointBackgroundColor: \"rgba(255, 99, 132, 1)\", // From old chart\n                pointBorderColor: \"#fff\",\n                pointHoverBackgroundColor: \"#fff\",\n                pointHoverBorderColor: \"rgba(255, 99, 132, 1)\",\n              },\n            ]\n          : []),\n        ...(supervisorScores\n          ? [\n              {\n                label: \"Supervisor Scores\",\n                data: categories.map((cat) => supervisorScores[cat] || 0),\n                fill: true,\n\n                 backgroundColor: \"rgba(54, 162, 235, 0.4)\", // From old chart\n          borderColor: \"rgba(54, 162, 235, 1)\", // From old chart\n          pointBackgroundColor: \"rgba(54, 162, 235, 1)\", // From old chart\n                \n                pointBorderColor: \"#fff\",\n                pointHoverBackgroundColor: \"#fff\",\n                pointHoverBorderColor: \"#9cca0d\",\n              },\n            ]\n          : []),\n      ],\n    };\n\n    const options = {\n      responsive: true,\n      maintainAspectRatio: false, // From old chart\n      scales: {\n        r: {\n          min: 0, // From old chart\n          max: 5, // From old chart\n          ticks: {\n            stepSize: 1, // From old chart\n            backdropColor: \"rgba(0, 0, 0, 0)\", // From old chart\n          },\n          pointLabels: {\n            font: {\n              size: 14, // From old chart\n              weight: \"bold\", // From old chart\n              family: \"'Gill Sans', Tahoma, Geneva, Verdana, sans-serif\", // From old chart\n            },\n            color: \"#333\", // From old chart\n          },\n          angleLines: { display: true },\n        },\n      },\n      plugins: {\n        legend: {\n          position: \"top\", // From old chart\n          labels: {\n            font: {\n              size: 15, // From old chart\n            },\n          },\n        },\n        tooltip: { enabled: true },\n      },\n    };\n\n    if (chartInstance.current) {\n      chartInstance.current.destroy();\n    }\n\n    chartInstance.current = new Chart(ctx, {\n      type: \"radar\",\n      data,\n      options,\n    });\n\n    return () => {\n      if (chartInstance.current) {\n        chartInstance.current.destroy();\n      }\n    };\n  }, [currentScores, projectedScores, supervisorScores, categories]);\n\n  return (\n    <div className=\"chart\" style={{ height: \"500px\" }}>\n      <canvas ref={chartRef} />\n    </div>\n  );\n};\n\nexport default SpiderChart;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}