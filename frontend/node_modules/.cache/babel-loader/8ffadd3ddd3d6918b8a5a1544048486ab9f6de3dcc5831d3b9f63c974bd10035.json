{"ast":null,"code":"const express = require(\"express\");\nconst router = express.Router();\nconst User = require(\"../models/User\");\nconst ScoreSubmission = require(\"../models/scoreSubmittion\");\nrouter.post(\"/scores\", async (req, res) => {\n  const user = req.session.user;\n  console.log(\"Session ID:\", req.sessionID);\n  console.log(\"Session user:\", user);\n  if (!user) {\n    return res.status(403).json({\n      error: \"Not authenticated\"\n    });\n  }\n  const {\n    current,\n    projected\n  } = req.body;\n  try {\n    const existingUser = await User.findById(user._id).populate(\"submissions\");\n    if (!existingUser) {\n      return res.status(404).json({\n        error: \"User not found\"\n      });\n    }\n    if (existingUser.submissions.length > 0) {\n      return res.status(409).json({\n        error: \"You have already submitted scores\"\n      });\n    }\n    const scoreSubmission = await ScoreSubmission.create({\n      submitter: user._id,\n      current,\n      projected,\n      status: \"pending\"\n    });\n    existingUser.submissions.push(scoreSubmission._id);\n    await existingUser.save();\n    res.status(201).json({\n      message: \"Scores submitted for approval.\"\n    });\n  } catch (err) {\n    console.error(\"Score save error:\", err);\n    res.status(500).json({\n      error: \"Failed to save scores.\"\n    });\n  }\n});\nrouter.get(\"/team\", async (req, res) => {\n  const user = req.session.user;\n  console.log(\"Session ID:\", req.sessionID);\n  console.log(\"Session user:\", req.session.user);\n  if (!user) {\n    return res.status(403).json({\n      error: \"Not authenticated\"\n    });\n  }\n  try {\n    const users = await User.find({}).select(\"name email role occupation submissions\").populate({\n      path: \"submissions\",\n      select: \"current projected supervisorAssessment status submittedAt approvedAt approvalComments approvedBy\"\n    });\n    let pendingCount = 0;\n    let approvedCount = 0;\n    let rejectedCount = 0;\n    console.log(`All users and their submissions:`);\n    console.log(`Total users: ${users.length}`);\n    users.forEach(member => {\n      console.log(`\\nUser: ${member.name} (${member.email}, Role: ${member.role}, Occupation: ${member.occupation})`);\n      if (member.submissions.length === 0) {\n        console.log(\"  No submissions found.\");\n      } else {\n        member.submissions.forEach((submission, index) => {\n          console.log(`  Submission ${index + 1}:`);\n          console.log(`    Status: ${submission.status}`);\n          console.log(`    Submitted At: ${submission.submittedAt}`);\n          console.log(\"    Current Scores:\", submission.current);\n          console.log(\"    Projected Scores:\", submission.projected);\n          if (submission.supervisorAssessment) {\n            console.log(\"    Supervisor Assessment:\", submission.supervisorAssessment);\n          }\n          if (submission.approvedAt) {\n            console.log(`    Approved At: ${submission.approvedAt}`);\n          }\n          if (submission.approvalComments) {\n            console.log(`    Approval Comments: ${submission.approvalComments}`);\n          }\n          if (submission.status === \"pending\") pendingCount++;else if (submission.status === \"approved\") approvedCount++;else if (submission.status === \"rejected\") rejectedCount++;\n        });\n      }\n    });\n    console.log(\"\\nSubmission Status Summary:\");\n    console.log(`  Total Pending: ${pendingCount}`);\n    console.log(`  Total Approved: ${approvedCount}`);\n    console.log(`  Total Rejected: ${rejectedCount}`);\n    res.json({\n      message: \"User submissions retrieved successfully\",\n      users,\n      summary: {\n        totalUsers: users.length,\n        pending: pendingCount,\n        approved: pendingCountapprovedCount,\n        rejected: rejectedCount\n      }\n    });\n  } catch (err) {\n    console.error(\"Error fetching user data:\", err);\n    res.status(500).json({\n      error: \"Failed to fetch user data.\"\n    });\n  }\n});\nrouter.patch(\"/scores/:submissionId/approve\", async (req, res) => {\n  const user = req.session.user;\n  console.log(\"Session ID:\", req.sessionID);\n  console.log(\"Session user:\", req.session.user);\n  if (!user || user.role !== \"supervisor\") {\n    return res.status(403).json({\n      error: \"Not authorized. Supervisor access required.\"\n    });\n  }\n  const {\n    submissionId\n  } = req.params;\n  const {\n    status,\n    approvalComments,\n    supervisorAssessment\n  } = req.body;\n  if (![\"approved\", \"rejected\"].includes(status)) {\n    return res.status(400).json({\n      error: \"Invalid status. Must be 'approved' or 'rejected'.\"\n    });\n  }\n  try {\n    const submission = await ScoreSubmission.findById(submissionId);\n    if (!submission) {\n      return res.status(404).json({\n        error: \"Submission not found.\"\n      });\n    }\n    if (submission.status !== \"pending\") {\n      return res.status(400).json({\n        error: \"Submission is not pending.\"\n      });\n    }\n    submission.status = status;\n    submission.approvedAt = new Date();\n    submission.approvedBy = user._id;\n    if (approvalComments) {\n      submission.approvalComments = approvalComments;\n    }\n    if (status === \"approved\" && supervisorAssessment) {\n      submission.supervisorAssessment = supervisorAssessment;\n    }\n    await submission.save();\n    console.log(`Submission ${submissionId} ${status} by ${user.name}`);\n    res.json({\n      message: `Submission ${status} successfully`,\n      submission\n    });\n  } catch (err) {\n    console.error(\"Error updating submission:\", err);\n    res.status(500).json({\n      error: \"Failed to update submission.\"\n    });\n  }\n});\nmodule.exports = router;","map":{"version":3,"names":["express","require","router","Router","User","ScoreSubmission","post","req","res","user","session","console","log","sessionID","status","json","error","current","projected","body","existingUser","findById","_id","populate","submissions","length","scoreSubmission","create","submitter","push","save","message","err","get","users","find","select","path","pendingCount","approvedCount","rejectedCount","forEach","member","name","email","role","occupation","submission","index","submittedAt","supervisorAssessment","approvedAt","approvalComments","summary","totalUsers","pending","approved","pendingCountapprovedCount","rejected","patch","submissionId","params","includes","Date","approvedBy","module","exports"],"sources":["/Volumes/Rben/Repos/Spider_chart/frontend/src/components/ScoreInput/ScoreFormManager.js"],"sourcesContent":["const express = require(\"express\");\nconst router = express.Router();\nconst User = require(\"../models/User\");\nconst ScoreSubmission = require(\"../models/scoreSubmittion\");\n\nrouter.post(\"/scores\", async (req, res) => {\n  const user = req.session.user;\n  console.log(\"Session ID:\", req.sessionID);\n  console.log(\"Session user:\", user);\n  if (!user) {\n    return res.status(403).json({ error: \"Not authenticated\" });\n  }\n\n  const { current, projected } = req.body;\n\n  try {\n    const existingUser = await User.findById(user._id).populate(\"submissions\");\n    if (!existingUser) {\n      return res.status(404).json({ error: \"User not found\" });\n    }\n\n    if (existingUser.submissions.length > 0) {\n      return res\n        .status(409)\n        .json({ error: \"You have already submitted scores\" });\n    }\n\n    const scoreSubmission = await ScoreSubmission.create({\n      submitter: user._id,\n      current,\n      projected,\n      status: \"pending\",\n    });\n\n    existingUser.submissions.push(scoreSubmission._id);\n    await existingUser.save();\n\n    res.status(201).json({ message: \"Scores submitted for approval.\" });\n  } catch (err) {\n    console.error(\"Score save error:\", err);\n    res.status(500).json({ error: \"Failed to save scores.\" });\n  }\n});\n\nrouter.get(\"/team\", async (req, res) => {\n  const user = req.session.user;\n  console.log(\"Session ID:\", req.sessionID);\n  console.log(\"Session user:\", req.session.user);\n  if (!user) {\n    return res.status(403).json({ error: \"Not authenticated\" });\n  }\n\n  try {\n    const users = await User.find({})\n      .select(\"name email role occupation submissions\")\n      .populate({\n        path: \"submissions\",\n        select:\n          \"current projected supervisorAssessment status submittedAt approvedAt approvalComments approvedBy\",\n      });\n\n    let pendingCount = 0;\n    let approvedCount = 0;\n    let rejectedCount = 0;\n\n    console.log(`All users and their submissions:`);\n    console.log(`Total users: ${users.length}`);\n\n    users.forEach((member) => {\n      console.log(\n        `\\nUser: ${member.name} (${member.email}, Role: ${member.role}, Occupation: ${member.occupation})`\n      );\n      if (member.submissions.length === 0) {\n        console.log(\"  No submissions found.\");\n      } else {\n        member.submissions.forEach((submission, index) => {\n          console.log(`  Submission ${index + 1}:`);\n          console.log(`    Status: ${submission.status}`);\n          console.log(`    Submitted At: ${submission.submittedAt}`);\n          console.log(\"    Current Scores:\", submission.current);\n          console.log(\"    Projected Scores:\", submission.projected);\n          if (submission.supervisorAssessment) {\n            console.log(\n              \"    Supervisor Assessment:\",\n              submission.supervisorAssessment\n            );\n          }\n          if (submission.approvedAt) {\n            console.log(`    Approved At: ${submission.approvedAt}`);\n          }\n          if (submission.approvalComments) {\n            console.log(\n              `    Approval Comments: ${submission.approvalComments}`\n            );\n          }\n\n          if (submission.status === \"pending\") pendingCount++;\n          else if (submission.status === \"approved\") approvedCount++;\n          else if (submission.status === \"rejected\") rejectedCount++;\n        });\n      }\n    });\n\n    console.log(\"\\nSubmission Status Summary:\");\n    console.log(`  Total Pending: ${pendingCount}`);\n    console.log(`  Total Approved: ${approvedCount}`);\n    console.log(`  Total Rejected: ${rejectedCount}`);\n\n    res.json({\n      message: \"User submissions retrieved successfully\",\n      users,\n      summary: {\n        totalUsers: users.length,\n        pending: pendingCount,\n        approved: pendingCountapprovedCount,\n        rejected: rejectedCount,\n      },\n    });\n  } catch (err) {\n    console.error(\"Error fetching user data:\", err);\n    res.status(500).json({ error: \"Failed to fetch user data.\" });\n  }\n});\n\nrouter.patch(\"/scores/:submissionId/approve\", async (req, res) => {\n  const user = req.session.user;\n  console.log(\"Session ID:\", req.sessionID);\n  console.log(\"Session user:\", req.session.user);\n  if (!user || user.role !== \"supervisor\") {\n    return res\n      .status(403)\n      .json({ error: \"Not authorized. Supervisor access required.\" });\n  }\n\n  const { submissionId } = req.params;\n  const { status, approvalComments, supervisorAssessment } = req.body;\n\n  if (![\"approved\", \"rejected\"].includes(status)) {\n    return res\n      .status(400)\n      .json({ error: \"Invalid status. Must be 'approved' or 'rejected'.\" });\n  }\n\n  try {\n    const submission = await ScoreSubmission.findById(submissionId);\n    if (!submission) {\n      return res.status(404).json({ error: \"Submission not found.\" });\n    }\n\n    if (submission.status !== \"pending\") {\n      return res.status(400).json({ error: \"Submission is not pending.\" });\n    }\n\n    submission.status = status;\n    submission.approvedAt = new Date();\n    submission.approvedBy = user._id;\n    if (approvalComments) {\n      submission.approvalComments = approvalComments;\n    }\n    if (status === \"approved\" && supervisorAssessment) {\n      submission.supervisorAssessment = supervisorAssessment;\n    }\n    await submission.save();\n\n    console.log(`Submission ${submissionId} ${status} by ${user.name}`);\n\n    res.json({\n      message: `Submission ${status} successfully`,\n      submission,\n    });\n  } catch (err) {\n    console.error(\"Error updating submission:\", err);\n    res.status(500).json({ error: \"Failed to update submission.\" });\n  }\n});\n\nmodule.exports = router;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}