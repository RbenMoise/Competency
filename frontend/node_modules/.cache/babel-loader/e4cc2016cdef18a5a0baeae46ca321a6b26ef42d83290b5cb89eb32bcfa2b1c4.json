{"ast":null,"code":"var _jsxFileName = \"/Volumes/Rben/Repos/Spider_chart/frontend/src/components/ScoreInput/ScoreFormManager.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from \"react\";\nimport axios from \"axios\";\nimport InputForm from \"./ScoreInput\";\nimport \"./ScoreInput.css\";\nimport { jsxDEV as _jsxDEV, Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nexport default function ScoreFormManager({\n  categories,\n  onScoresChange,\n  initialScores\n}) {\n  _s();\n  const [currentScores, setCurrentScores] = useState((initialScores === null || initialScores === void 0 ? void 0 : initialScores.currentScores) || Object.fromEntries(categories.map(cat => [cat, 1])));\n  const [projectedScores, setProjectedScores] = useState((initialScores === null || initialScores === void 0 ? void 0 : initialScores.projectedScores) || Object.fromEntries(categories.map(cat => [cat, 1])));\n  const [sending, setSending] = useState(false);\n  const [message, setMessage] = useState(\"\");\n  const [submissionStatus, setSubmissionStatus] = useState(null);\n  useEffect(() => {\n    onScoresChange({\n      currentScores,\n      projectedScores\n    });\n  }, [currentScores, projectedScores, onScoresChange]);\n  useEffect(() => {\n    const fetchSubmissionStatus = async () => {\n      try {\n        const res = await axios.get(\"http://localhost:4000/api/scores/pending\", {\n          withCredentials: true\n        });\n        if (res.data.length > 0) {\n          setSubmissionStatus(res.data[0].status);\n          setMessage(\"⏳ Your scores are pending review.\");\n        }\n      } catch (error) {\n        console.error(\"Error fetching submission status:\", error);\n      }\n    };\n    fetchSubmissionStatus();\n  }, []);\n  const handleScoreChange = setter => e => {\n    const {\n      name,\n      value\n    } = e.target;\n    const val = Math.min(5, Math.max(0, parseInt(value) || 0));\n    setter(prev => ({\n      ...prev,\n      [name]: val\n    }));\n  };\n  const handleSendScores = async () => {\n    setSending(true);\n    setMessage(\"\");\n    const isValidScore = val => typeof val === \"number\" && !isNaN(val) && val > 0 && val <= 5;\n    const allCurrentFilled = Object.values(currentScores).every(isValidScore);\n    const allProjectedFilled = Object.values(projectedScores).every(isValidScore);\n    if (!allCurrentFilled || !allProjectedFilled) {\n      setMessage(\"⚠️ Please fill in all fields with scores between 1 and 5.\");\n      setSending(false);\n      return;\n    }\n    try {\n      const response = await axios.post(\"http://localhost:4000/api/scores\", {\n        current: currentScores,\n        projected: projectedScores\n      }, {\n        withCredentials: true\n      });\n      setMessage(response.data.message);\n      setSubmissionStatus(\"pending\");\n    } catch (error) {\n      var _error$response, _error$response2;\n      console.error(\"Error submitting scores:\", (_error$response = error.response) === null || _error$response === void 0 ? void 0 : _error$response.data);\n      const status = (_error$response2 = error.response) === null || _error$response2 === void 0 ? void 0 : _error$response2.status;\n      setMessage(status === 403 ? \"🚫 Session expired. Please log in again.\" : status === 409 ? \"⏳ You have a pending submission awaiting review.\" : status === 400 ? \"⚠️ \" + error.response.data.message : \"❌ Error submitting scores. Try again.\");\n      if (status === 403) {\n        window.location.href = \"/login\";\n      }\n    } finally {\n      setSending(false);\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(InputForm, {\n      title: \"CURRENT STATE (JUNE 2025)\",\n      scores: currentScores,\n      onChange: handleScoreChange(setCurrentScores),\n      categories: categories\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 103,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(InputForm, {\n      title: \"TARGET FOR 2027\",\n      scores: projectedScores,\n      onChange: handleScoreChange(setProjectedScores),\n      categories: categories\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 109,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"submit-section\",\n      children: [/*#__PURE__*/_jsxDEV(\"button\", {\n        className: \"modern-button send-btn\",\n        onClick: handleSendScores,\n        disabled: sending || submissionStatus === \"pending\",\n        children: sending ? \"Sending...\" : \"Send Scores\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 116,\n        columnNumber: 9\n      }, this), message && /*#__PURE__*/_jsxDEV(\"p\", {\n        className: \"status-message\",\n        children: message\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 123,\n        columnNumber: 21\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 115,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true);\n}\n_s(ScoreFormManager, \"K/iT3T1/G+g5RIpQhEK1jWBa7n8=\");\n_c = ScoreFormManager;\nvar _c;\n$RefreshReg$(_c, \"ScoreFormManager\");","map":{"version":3,"names":["React","useState","useEffect","axios","InputForm","jsxDEV","_jsxDEV","Fragment","_Fragment","ScoreFormManager","categories","onScoresChange","initialScores","_s","currentScores","setCurrentScores","Object","fromEntries","map","cat","projectedScores","setProjectedScores","sending","setSending","message","setMessage","submissionStatus","setSubmissionStatus","fetchSubmissionStatus","res","get","withCredentials","data","length","status","error","console","handleScoreChange","setter","e","name","value","target","val","Math","min","max","parseInt","prev","handleSendScores","isValidScore","isNaN","allCurrentFilled","values","every","allProjectedFilled","response","post","current","projected","_error$response","_error$response2","window","location","href","children","title","scores","onChange","fileName","_jsxFileName","lineNumber","columnNumber","className","onClick","disabled","_c","$RefreshReg$"],"sources":["/Volumes/Rben/Repos/Spider_chart/frontend/src/components/ScoreInput/ScoreFormManager.js"],"sourcesContent":["import React, { useState, useEffect } from \"react\";\nimport axios from \"axios\";\nimport InputForm from \"./ScoreInput\";\nimport \"./ScoreInput.css\";\n\nexport default function ScoreFormManager({\n  categories,\n  onScoresChange,\n  initialScores,\n}) {\n  const [currentScores, setCurrentScores] = useState(\n    initialScores?.currentScores ||\n      Object.fromEntries(categories.map((cat) => [cat, 1]))\n  );\n  const [projectedScores, setProjectedScores] = useState(\n    initialScores?.projectedScores ||\n      Object.fromEntries(categories.map((cat) => [cat, 1]))\n  );\n  const [sending, setSending] = useState(false);\n  const [message, setMessage] = useState(\"\");\n  const [submissionStatus, setSubmissionStatus] = useState(null);\n\n  useEffect(() => {\n    onScoresChange({ currentScores, projectedScores });\n  }, [currentScores, projectedScores, onScoresChange]);\n\n  useEffect(() => {\n    const fetchSubmissionStatus = async () => {\n      try {\n        const res = await axios.get(\n          \"http://localhost:4000/api/scores/pending\",\n          {\n            withCredentials: true,\n          }\n        );\n        if (res.data.length > 0) {\n          setSubmissionStatus(res.data[0].status);\n          setMessage(\"⏳ Your scores are pending review.\");\n        }\n      } catch (error) {\n        console.error(\"Error fetching submission status:\", error);\n      }\n    };\n    fetchSubmissionStatus();\n  }, []);\n\n  const handleScoreChange = (setter) => (e) => {\n    const { name, value } = e.target;\n    const val = Math.min(5, Math.max(0, parseInt(value) || 0));\n    setter((prev) => ({ ...prev, [name]: val }));\n  };\n\n  const handleSendScores = async () => {\n    setSending(true);\n    setMessage(\"\");\n\n    const isValidScore = (val) =>\n      typeof val === \"number\" && !isNaN(val) && val > 0 && val <= 5;\n\n    const allCurrentFilled = Object.values(currentScores).every(isValidScore);\n    const allProjectedFilled =\n      Object.values(projectedScores).every(isValidScore);\n\n    if (!allCurrentFilled || !allProjectedFilled) {\n      setMessage(\"⚠️ Please fill in all fields with scores between 1 and 5.\");\n      setSending(false);\n      return;\n    }\n\n    try {\n      const response = await axios.post(\n        \"http://localhost:4000/api/scores\",\n        { current: currentScores, projected: projectedScores },\n        { withCredentials: true }\n      );\n\n      setMessage(response.data.message);\n      setSubmissionStatus(\"pending\");\n    } catch (error) {\n      console.error(\"Error submitting scores:\", error.response?.data);\n      const status = error.response?.status;\n\n      setMessage(\n        status === 403\n          ? \"🚫 Session expired. Please log in again.\"\n          : status === 409\n          ? \"⏳ You have a pending submission awaiting review.\"\n          : status === 400\n          ? \"⚠️ \" + error.response.data.message\n          : \"❌ Error submitting scores. Try again.\"\n      );\n\n      if (status === 403) {\n        window.location.href = \"/login\";\n      }\n    } finally {\n      setSending(false);\n    }\n  };\n\n  return (\n    <>\n      <InputForm\n        title=\"CURRENT STATE (JUNE 2025)\"\n        scores={currentScores}\n        onChange={handleScoreChange(setCurrentScores)}\n        categories={categories}\n      />\n      <InputForm\n        title=\"TARGET FOR 2027\"\n        scores={projectedScores}\n        onChange={handleScoreChange(setProjectedScores)}\n        categories={categories}\n      />\n      <div className=\"submit-section\">\n        <button\n          className=\"modern-button send-btn\"\n          onClick={handleSendScores}\n          disabled={sending || submissionStatus === \"pending\"}\n        >\n          {sending ? \"Sending...\" : \"Send Scores\"}\n        </button>\n        {message && <p className=\"status-message\">{message}</p>}\n      </div>\n    </>\n  );\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}